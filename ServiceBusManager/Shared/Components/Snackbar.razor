@using System.Threading.Tasks;
@using System.Timers;
@using System.Diagnostics;
@using System.Drawing;

@if (Active)
{
    <div class="modal modal-sheet position-static d-block bg-body-secondary p-4 py-md-5" tabindex="-1" role="dialog" id="modalSheet">
        <div class="modal-dialog" role="document">
            <div style="background-color:@ColorTranslator.ToHtml(BackgroundColor)" class="modal-content rounded-4 shadow">
                <div class="modal-header border-bottom-0">
                    <h1 style="color:@ColorTranslator.ToHtml(TextColor)" class="modal-title fs-5">@Message</h1>
                    <button @onclick="RemoveWindow" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Message { get; set; } = string.Empty;
    [Parameter]
    public bool Active { get; set; }
    [Parameter]
    public int Lifetime { get; set; } = -1;
    private double _lifeTimeTracker = 0.0d;

    [Parameter]
    public Color BackgroundColor { get; set; } = Color.White;
    [Parameter]
    public Color TextColor { get; set; } = Color.Black;

    private Timer? _timer;

    protected override void OnAfterRender(bool firstRender)
    {
        if (Lifetime != -1)
        {
            StartTimer();
        }
    }

    private void StartTimer()
    {
        _lifeTimeTracker = 0.0d;
        if (_timer is null)
        {
            _timer = new Timer(1000.0d);
            _timer.Elapsed += TimerCounter;
            _timer.Enabled = true;
            _timer.Start();
        }
    }

    private void TimerCounter(object? sender, ElapsedEventArgs e)
    {
        if(sender is null){ return; }
        _lifeTimeTracker++;
        if (_lifeTimeTracker >= Lifetime)
        {
            RemoveWindow();
            Task.Run(async () => await InvokeAsync(() => StateHasChanged()));
            _timer?.Stop();
            _timer = null;
        }
    }

    private void RemoveWindow()
    {
         Active = false;
    }
}
