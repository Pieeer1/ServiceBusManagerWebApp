@inherits LayoutComponentBase
@inject ILocalStorageManager _localStorageManager;
@inject IConnectionManager _connectionManager;
@inject IHotkeyManager _hotkeyManager;
<PageTitle>ServiceBusManager</PageTitle>

<div @ref="_baseRef" tabindex="0" @onkeydown="HandleKeyDown" @onkeyup="HandleKeyUp" class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">

        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{

    private ElementReference _baseRef;

    private HashSet<IPressable> _currentlyPressedKeys = new HashSet<IPressable>();

    /// <summary>
    /// For Hotkeys, Subscribes to the keyboard event and invokes delegate on service
    /// </summary>
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        _currentlyPressedKeys.Add(new Key(e.Key));
        _currentlyPressedKeys.Add(new Code(e.Code));

        _hotkeyManager.TriggerHotkey(_currentlyPressedKeys.ToArray());
    }
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        _currentlyPressedKeys.Clear();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            foreach (var connection in await _localStorageManager.GetConnections())
            {
                if (_connectionManager.GetServiceBusConnections().Any(x => x.Name == connection.Key)) { break; }
                _connectionManager.AddConnection(new AddConnectionForm() { Name = connection.Key, ConnectionString = connection.Value }, out string? localStorageError);
                if (localStorageError is not null)
                {
                    //TODO - and potentially notify user
                    await _localStorageManager.RemoveConnectionFromLocalStorage(connection.Key);
                }
            }
            await _baseRef.FocusAsync();
        }
    }
}