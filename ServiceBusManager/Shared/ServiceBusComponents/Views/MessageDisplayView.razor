@using Azure.Messaging.ServiceBus;
@using System.Text;
<div class="@((((ServiceBusMessageBodies.Where(x => x.Value.Length/50 > 25).Count() >= 2) && ServiceBusMessageBodies.Count() >= 2) || ServiceBusMessageBodies.Count() > 10) ? "scroll-when-needed" : string.Empty)"> @*TODO -- LOOK AT BETTER WAYS TO DYNAMICALLY SET SCROLLBAR*@
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Message</th>
                <th scope="col">Application Properties</th>
                <th scope="col">Enqueued Time (UTC)</th>
                <th scope="col">Download</th>
                <th scope="col">Send Identical Message</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < ServiceBusReceivedMessages.Count; i++)
            {
                int lambdaI = i;

                <tr>
                    <th class="col-1 align-middle" scope="row">@(lambdaI + 1)</th>
                    <td class="col-5 align-middle" style="word-wrap:anywhere;">
                        <InputTextArea @bind-Value="ServiceBusMessageBodies[lambdaI].Value" disabled="@true" class="fuck-resize form-control" rows="@(Math.Clamp(ServiceBusMessageBodies[lambdaI].Value.Length/50, 3, 25))"></InputTextArea>
                    </td>
                    <td class="col-5 align-middle">
                            @for(int j = 0; j < ServiceBusApplicationProperties[lambdaI].Count; j++)
                            {
                                int lambdaJ = j;
                                <div class="d-flex justify-content-center" style="padding:3px;">
                                    <div style="padding-right:3px;">
                                        <label for="appPropKey">Key</label>
                                        <InputTextArea @bind-Value="ServiceBusApplicationProperties[lambdaI].Keys.ElementAt(lambdaJ).Value" disabled="@true" class="fuck-resize form-control" id="appPropKey"></InputTextArea>
                                    </div>
                                    <div style="padding-left:3px;">
                                    <label for="appPropValue">Value</label>
                                        <InputTextArea @bind-Value="ServiceBusApplicationProperties[lambdaI].Values.ElementAt(lambdaJ).Value" disabled="@true" class="fuck-resize form-control" id="appPropValue"></InputTextArea>
                                    </div>
                                </div>
                            }
                    </td>
                    <td class="col-2 align-middle">@(ServiceBusReceivedMessages.ElementAt(i).EnqueuedTime.ToString("MM/dd/yyyy HH:mm"))</td>
                    <td class="col-1 align-middle"><DownloadableContent Data="ServiceBusReceivedMessages[lambdaI].Body"></DownloadableContent></td>
                    <td class="col-1 align-middle">
                        <SendMessageIcon OnClickCallback="() => SendIdenticalMessage(lambdaI, ServiceBusMessageBodies[lambdaI].Value, ServiceBusApplicationProperties[lambdaI].ToDictionary(x => x.Key.Value, y => y.Value.Value))"></SendMessageIcon> 
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@code {

    [Parameter]
    public List<ServiceBusReceivedMessage> ServiceBusReceivedMessages { get; set; } = new List<ServiceBusReceivedMessage>();
    [Parameter]
    public EventCallback<(string, Dictionary<string, string>)> SendIdenticalMessageClicked {get;set;}

    private List<FormResponse> ServiceBusMessageBodies { get => ServiceBusReceivedMessages.Select(x => new FormResponse() { Value = Encoding.UTF8.GetString(x.Body) }).ToList(); }

    private List<Dictionary<FormResponse, FormResponse>> ServiceBusApplicationProperties 
    {
        get => ServiceBusReceivedMessages.Select(x => x.ApplicationProperties.Where(z => !(string.IsNullOrEmpty(z.Key) || string.IsNullOrEmpty((string)z.Value)) ).Select((y, i) =>
        new KeyValuePair<FormResponse, FormResponse>(new FormResponse() { Value = y.Key }, new FormResponse() { Value = (string)y.Value }))
        .ToDictionary(x => x.Key, y => y.Value)).ToList();
    }


    public async Task SendIdenticalMessage(int i, string messageText, Dictionary<string,string> applicationProperties)
    {
        if (SendIdenticalMessageClicked.HasDelegate)
        {
            await SendIdenticalMessageClicked.InvokeAsync((messageText, applicationProperties));
        }
    }
    
}
