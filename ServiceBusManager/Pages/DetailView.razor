@page "/detailView"
@using Azure.Messaging.ServiceBus.Administration;
@inject IConnectionManager _connectionManager;
@inject IServiceBusClientAdminManager _serviceBusClientAdminManager;


<div class="container text-center">
    <h1>Details</h1>

    @if (_activeServiceBusConnections.Any())
    {
        <h3>Active Connection:</h3>
        <FormSelect TItem="ServiceBusConnectionViewModel" Items="_activeServiceBusConnections" Selector="(x => x.Name)" ValueChanged="(s) => SetActiveConnection(s.Name)"></FormSelect>
        @if (_activeTopics is null)
        {
            <div><Spinner></Spinner></div>
        }
        else
        {
            <h4>Active Topic</h4>
            <Search T="FullTopicData" OnSearchChanged="SearchChanged" FilterStringToSearch=" x => x.TopicProperties.Name"></Search>
            <Accordion T="FullTopicData" Items="_activeTopics.Where(_filterExpression).ToList()" HeaderTextSelector="x => x.TopicProperties.Name" OnSelectionCallbackAsync="SelectTopic">
                @if (_activeFullTopic?.SubscriptionRuntimeProperties is null)
                {
                    <Spinner></Spinner>
                }
                else
                {
                    <Accordion 
                        T="SubscriptionRuntimeProperties" 
                        Items="_activeFullTopic.SubscriptionRuntimeProperties.ToList()" 
                        HeaderTextSelector="@(x => $"{x.SubscriptionName} - ({x.ActiveMessageCount}, {x.DeadLetterMessageCount})")" 
                        OnSelectionCallbackAsync="SelectSubscription">
                        <Modal SecondaryButtonText="Send Message" SecondaryButtonAction="() => { }" SecondaryButtonDisabled="string.IsNullOrWhiteSpace(_sendMessageString)">
                            @*TODO --- IMPLEMENT SEND MESSAGE ACTION*@
                            <ModalButtonLabel>Send Message</ModalButtonLabel>
                            <Title>Send Message - @_activeSubscription?.SubscriptionName</Title>
                            <ModalBody>
                                <InputTextArea class="fuck-resize fill-parent" rows="25" @bind-Value="_sendMessageString"></InputTextArea>
                                <div class="flex-row">Message Properties</div>
                                <div class="d-flex">
                                    <div class="flex-fill" style="padding:15px;">
                                        <div>Key</div>
                                        <InputText class="fill-parent" @bind-Value="a"></InputText>
                                    </div>
                                    <div class="flex-fill" style="padding:15px;">
                                        <div>Value</div>
                                        <InputText class="fill-parent"  @bind-Value="b"></InputText>
                                    </div>
                                </div>
                            </ModalBody>
                        </Modal>
                    </Accordion>
                }
            </Accordion>
        }
    }
    else
    {
        <div>No Active Connections Found</div>
        <NavLink class="nav-link" href="manageConnections">
            <span class="oi oi-list-rich" aria-hidden="true"></span> Add Connections
        </NavLink>
    }
</div>

@code {
    private List<ServiceBusConnectionViewModel> _activeServiceBusConnections = null!;
    private Func<FullTopicData, bool> _filterExpression = x => true;
    private List<FullTopicData>? _activeTopics;
    private FullTopicData? _activeFullTopic;
    private SubscriptionRuntimeProperties? _activeSubscription;

    private string _sendMessageString = string.Empty;
    private string a; //TODO - REMOVE 
    private string b; //TODO - REMOVE


    protected override async Task OnInitializedAsync()
    {
        _activeServiceBusConnections = _connectionManager.GetServiceBusConnections().ToList();
        if (_activeServiceBusConnections.Any())
        {
            await SetActiveConnection(_activeServiceBusConnections.First().Name);
        }
    }

    private async Task SetActiveConnection(string name)
    {
        _activeTopics = null; // no matter what reset value of _activeTopics, triggers the @onChange in the input form
        _serviceBusClientAdminManager.SetActiveConnection(name);
        await GetTopicsFromActiveConnection();
        if (_activeTopics?.Any() ?? false)
        {
            await SelectTopic(_activeTopics.First());
        }
    }
    private async Task GetTopicsFromActiveConnection()
    {
        _activeTopics = (await _serviceBusClientAdminManager.GetTopics()).Select(x => new FullTopicData(x.Key, x.Value)).ToList();
    }
    private async Task SelectTopic(FullTopicData topic)
    {
        _activeFullTopic = topic;
        _activeTopics?.Where(x => x != _activeFullTopic).ToList().ForEach(e => 
        {
            e.SubscriptionProperties = null;
            e.SubscriptionRuntimeProperties = null;
        }); // wipe data to trigger GC on expensive massive memory eating subs and topics
        Dictionary<SubscriptionProperties, SubscriptionRuntimeProperties> resp = (await _serviceBusClientAdminManager.GetSubscriptions(topic.TopicProperties.Name));
        topic.SubscriptionProperties = resp.Select(x => x.Key);
        topic.SubscriptionRuntimeProperties = resp.Select(x => x.Value);
        await InvokeAsync(() => StateHasChanged());
        if (topic.SubscriptionProperties.Any())
        { 
            await SelectSubscription(topic.SubscriptionRuntimeProperties.First());
        }
    }
    private async Task SelectSubscription(SubscriptionRuntimeProperties subscription)
    {
        _activeSubscription = subscription;
        await InvokeAsync(() => StateHasChanged());
    }
    private void SearchChanged(Func<FullTopicData, bool> args)
    {
        _filterExpression = args;
    }
}
