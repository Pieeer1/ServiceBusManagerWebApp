@page "/detailView"
@using Azure.Messaging.ServiceBus.Administration;
@inject IConnectionManager _connectionManager;
@inject IServiceBusClientAdminManager _serviceBusClientAdminManager;


<div class="container text-center">
    <h1>Details</h1>

    @if (_activeServiceBusConnections.Any())
    {
        <h3>Active Connection:</h3>
        <FormSelect TItem="ServiceBusConnectionViewModel" Items="_activeServiceBusConnections" Selector="(x => x.Name)" ValueChanged="(s) => SetActiveConnection(s.Name)"></FormSelect>
        @if (_activeTopics is null)
        {
            <div><Spinner></Spinner></div>
        }
        else
        {
            <h4>Active Topic</h4>
            <FormSelect TItem="FullTopicData" Items="_activeTopics" Selector="(x => x.TopicProperties.Name)" ValueChanged="() => {}"></FormSelect>

            <Accordion T="FullTopicData" Items="_activeTopics" HeaderTextSelector="x => x.TopicProperties.Name" OnSelectionCallbackAsync="SelectTopic">
                @if (_activeFullTopic?.SubscriptionProperties is null)
                {
                    <Spinner></Spinner>
                }
                else
                {
                    @foreach (var item in _activeFullTopic.SubscriptionProperties)
                    {
                        <div>@item.SubscriptionName</div>
                    }
                }
            </Accordion>
        }
    }
    else
    {
        <div>No Active Connections Found</div>
        <NavLink class="nav-link" href="manageConnections">
            <span class="oi oi-list-rich" aria-hidden="true"></span> Add Connections
        </NavLink>
    }
</div>

@code {
    private List<ServiceBusConnectionViewModel> _activeServiceBusConnections = null!;
    private List<FullTopicData>? _activeTopics;
    private FullTopicData? _activeFullTopic;

    protected override async Task OnInitializedAsync()
    {
        _activeServiceBusConnections = _connectionManager.GetServiceBusConnections().ToList();
        if (_activeServiceBusConnections.Any())
        {
            await SetActiveConnection(_activeServiceBusConnections.First().Name);
        }
    }

    private async Task SetActiveConnection(string name)
    {
        _activeTopics = null; // no matter what reset value of _activeTopics, triggers the @onChange in the input form
        _serviceBusClientAdminManager.SetActiveConnection(name);
        await GetTopicsFromActiveConnection();
        if (_activeTopics?.Any() ?? false)
        {
            await SelectTopic(_activeTopics.First());
        }
    }
    private async Task GetTopicsFromActiveConnection()
    {
        _activeTopics = (await _serviceBusClientAdminManager.GetTopics()).Select(x => new FullTopicData(x)).ToList();
    }
    private async Task SelectTopic(FullTopicData topic)
    {
        _activeFullTopic = topic;
        _activeTopics?.Where(x => x != _activeFullTopic).ToList().ForEach(e => e.SubscriptionProperties = null); // wipe data to make selection more efficient
        topic.SubscriptionProperties = (await _serviceBusClientAdminManager.GetSubscriptions(topic.TopicProperties.Name));
        await InvokeAsync(() => StateHasChanged());
    }
}
