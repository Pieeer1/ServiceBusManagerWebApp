@using System.Text.Json;
@inject IJSRuntime _jsRuntime;
@if (!_isSpinning)
{
    <DownloadIcon OnClickCallback="Download"></DownloadIcon>
}
else
{
    <Spinner></Spinner>
}
<script> @*HACK - WORKS TO DOWNLOAD FILES UNDER ~250MBS*@
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script> 
@code {
    [Parameter]
    public BinaryData Data { get; set; } = null!;

    private bool _isSpinning = false;

    public async Task Download() 
    {
        _isSpinning = true;
        using DotNetStreamReference streamRef = new DotNetStreamReference(stream: new MemoryStream(Data.ToArray()));
        await _jsRuntime.InvokeVoidAsync("downloadFileFromStream", $"{DateTime.UtcNow.ToString()}.{GetFileExtension()}", streamRef);
        _isSpinning = false;
    }

    private string GetFileExtension() //TODO - REFACTOR FOR MORE FILETYPES AND TO BE MORE ACCURATE, THIS IS A PLACEHOLDER
    {
        string fileContent = Data.ToString().Trim();

        if ((fileContent.FirstOrDefault() == '{' && fileContent.LastOrDefault() == '}') || (fileContent.FirstOrDefault() == '[' && fileContent.LastOrDefault() == ']')) // json
        {
            return "json";   
        }
        else if (fileContent.FirstOrDefault() == '<' && fileContent.LastOrDefault() == '>' && fileContent.Contains("xml version")) // xml
        {
            return "xml";
        }
        return "txt";
    }
}
